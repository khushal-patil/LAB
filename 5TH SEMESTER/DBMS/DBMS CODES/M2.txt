 
Design and Develop MongoDB Queries using CRUD operations: 
Create Employee collection by considering following Fields: 
i.	Name:  Embedded Doc (FName, LName) 
ii.	Company Name: String  
iii.	Salary: Number 
iv.	Designation: String 
v.	Age: Number 
vi.	Expertise: Array  
vii.	DOB: String or Date 
viii.	Email id: String ix. Contact: String  
x. Address: Array of Embedded Doc (PAddr, LAddr) 
Insert at least 5 documents in collection by considering above attribute and execute following queries: 
db.Employee.insertMany([
  {
    "Name": { "FName": "John", "LName": "Doe" },
    "Company Name": "TCS",
    "Salary": 120000,
    "Designation": "Developer",
    "Age": 28,
    "Expertise": ["Java", "Spring", "Hibernate"],
    "DOB": "1995-08-10",
    "Email id": "john.doe@tcs.com",
    "Contact": "9876543210",
    "Address": [
      { "PAddr": "123 Main St", "LAddr": "Mumbai" }
    ]
  },
  {
    "Name": { "FName": "Jane", "LName": "Smith" },
    "Company Name": "Infosys",
    "Salary": 95000,
    "Designation": "Tester",
    "Age": 24,
    "Expertise": ["Testing", "Selenium", "Automation"],
    "DOB": "1999-06-15",
    "Email id": "jane.smith@infosys.com",
    "Contact": "9871234567",
    "Address": [
      { "PAddr": "456 Elm St", "LAddr": "Pune" }
    ]
  },
  {
    "Name": { "FName": "Alice", "LName": "Johnson" },
    "Company Name": "TCS",
    "Salary": 80000,
    "Designation": "Developer",
    "Age": 32,
    "Expertise": ["Python", "Machine Learning"],
    "DOB": "1991-05-25",
    "Email id": "alice.johnson@tcs.com",
    "Contact": "5559876543",
    "Address": [
      { "PAddr": "789 Oak St", "LAddr": "Delhi" }
    ]
  },
  {
    "Name": { "FName": "Bob", "LName": "Williams" },
    "Company Name": "Wipro",
    "Salary": 105000,
    "Designation": "Manager",
    "Age": 35,
    "Expertise": ["Project Management", "Agile"],
    "DOB": "1988-11-30",
    "Email id": "bob.williams@wipro.com",
    "Contact": "7776543210",
    "Address": [
      { "PAddr": "123 Pine St", "LAddr": "Bangalore" }
    ]
  },
  {
    "Name": { "FName": "Eve", "LName": "Davis" },
    "Company Name": "Infosys",
    "Salary": 115000,
    "Designation": "Developer",
    "Age": 26,
    "Expertise": ["Java", "Spring Boot", "Microservices"],
    "DOB": "1997-03-21",
    "Email id": "eve.davis@infosys.com",
    "Contact": "6669876543",
    "Address": [
      { "PAddr": "234 Maple St", "LAddr": "Chennai" }
    ]
  }
]);
1.	Final name of Employee where age is less than 30 and salary more than 50000.  
db.Employee.find(
  { "Age": { $lt: 30 }, "Salary": { $gt: 50000 } },
  { "Name": 1, "_id": 0 }
);
2.	Creates a new document if no document in the employee collection contains 
      {Designation: "Tester", Company_name: "TCS", Age: 25} 
db.Employee.find(
  { "Age": { $lt: 30 }, "Salary": { $gt: 50000 } },
  { "Name": 1, "_id": 0 }
);
var existingDoc = db.Employee.findOne({ "Designation": "Tester", "Company Name": "TCS", "Age": 25 });
if (!existingDoc) {
  db.Employee.insertOne({
    "Name": { "FName": "Sam", "LName": "Taylor" },
    "Company Name": "TCS",
    "Salary": 90000,
    "Designation": "Tester",
    "Age": 25,
    "Expertise": ["Automation", "Selenium", "TestNG"],
    "DOB": "1998-02-15",
    "Email id": "sam.taylor@tcs.com",
    "Contact": "9876543211",
    "Address": [
      { "PAddr": "123 Park Ave", "LAddr": "Pune" }
    ]
  });
}else{
 print('record already exits')
}
3.	Selects all documents in the collection where the field age has a value less than 30 or the value of the salary field is greater than 40000. 
db.Employee.find({
  $or: [
    { "Age": { $lt: 30 } },
    { "Salary": { $gt: 40000 } }
  ]
});
4.	Find documents where Designation is not equal to "Developer".
db.Employee.find({ "Designation": { $ne: "Developer" } }); 
5.	Find _id, Designation, Address and Name from all documents where Company_name is "Infosys". 
db.Employee.find(
  { "Company Name": "Infosys" },
  { "_id": 1, "Designation": 1, "Address": 1, "Name": 1 }
);
6.	Display only FName and LName of all Employees 
db.Employee.find(
  {},
  { "Name.FName": 1, "Name.LName": 1, "_id": 0 }
); 
 
