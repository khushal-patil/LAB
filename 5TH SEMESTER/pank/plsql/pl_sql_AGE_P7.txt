-- Create a sample table to store person details with date of birth
CREATE TABLE person (
    person_id NUMBER PRIMARY KEY,
    name VARCHAR2(50),
    dob DATE
);

-- Insert sample data with Indian names
INSERT INTO person VALUES (1, 'Amit Kumar', TO_DATE('1995-08-15', 'YYYY-MM-DD'));
INSERT INTO person VALUES (2, 'Priya Singh', TO_DATE('2000-01-25', 'YYYY-MM-DD'));
INSERT INTO person VALUES (3, 'Rahul Desai', TO_DATE('1988-06-10', 'YYYY-MM-DD'));

-- Commit the sample data
COMMIT;

CREATE OR REPLACE FUNCTION Age_calc (
    dob IN DATE,                -- Date of birth input
    p_months OUT NUMBER,        -- OUT parameter for months
    p_days OUT NUMBER           -- OUT parameter for days
) RETURN NUMBER IS
    v_years NUMBER;             -- Variable to store the years part
BEGIN
    -- Calculate years, months, and days
    SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, dob) / 12) INTO v_years FROM dual;
    SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, dob)) - (v_years * 12) INTO p_months FROM dual;
    SELECT SYSDATE - ADD_MONTHS(dob, (v_years * 12) + p_months) INTO p_days FROM dual;

    -- Return the age in years
    RETURN v_years;
END;
/

DECLARE
    v_person_id NUMBER := 2;  -- Set this to any person ID to check their age
    v_years NUMBER;
    v_months NUMBER;
    v_days NUMBER;
    v_dob DATE;
BEGIN
    -- Retrieve the date of birth for the person
    SELECT dob INTO v_dob FROM person WHERE person_id = v_person_id;

    -- Call the Age_calc function and capture the output in variables
    v_years := Age_calc(v_dob, v_months, v_days);

    -- Print the output using DBMS_OUTPUT
    DBMS_OUTPUT.PUT_LINE('Age: ' || v_years || ' years, ' || v_months || ' months, ' || v_days || ' days');
END;
/
