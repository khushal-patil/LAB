import java.io.*;
import java.util.*;

public class SPOS2 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("MACRO.asm"));
        FileWriter mnt = new FileWriter("mnt.txt");
        FileWriter mdt = new FileWriter("mdt.txt");
        FileWriter kpdt = new FileWriter("kpdt.txt");
        FileWriter pnt = new FileWriter("pntab.txt");
        FileWriter ir = new FileWriter("intermediate.txt");

        LinkedHashMap<String, Integer> pntab = new LinkedHashMap<>();
        String line, macroname = null;
        int mdtp = 1, kpdtp = 0, paramNo = 1, pp = 0, kp = 0, flag = 0;

        while ((line = br.readLine()) != null) {
            String[] parts = line.trim().split("\\s+");

            // Check if line contains "MACRO" keyword
            if (parts[0].equalsIgnoreCase("MACRO")) {
                flag = 1;  // Indicate that we're in a macro definition
                line = br.readLine();
                parts = line.trim().split("\\s+");
                macroname = parts[0];

                // Check if there are no parameters
                if (parts.length <= 1) {
                    mnt.write(macroname + "\t" + pp + "\t" + kp + "\t" + mdtp + "\t" + (kp == 0 ? kpdtp : (kpdtp + 1)) + "\n");
                    continue;
                }

                // Process parameters
                for (int i = 1; i < parts.length; i++) {
                    parts[i] = parts[i].replaceAll("[&,]", "");  // Remove & and , from parameters

                    // Check if the parameter is a keyword parameter
                    if (parts[i].contains("=")) {
                        ++kp;
                        String[] keywordParam = parts[i].split("=");
                        pntab.put(keywordParam[0], paramNo++);
                        
                        // Write keyword parameter with default value if provided, otherwise write "-"
                        if (keywordParam.length == 2) {
                            kpdt.write(keywordParam[0] + "\t" + keywordParam[1] + "\n");
                        } else {
                            kpdt.write(keywordParam[0] + "\t-\n");
                        }
                    } else {
                        // Positional parameter
                        pntab.put(parts[i], paramNo++);
                        pp++;
                    }
                }

                // Write macro details to MNT
                mnt.write(macroname + "\t" + pp + "\t" + kp + "\t" + mdtp + "\t" + (kp == 0 ? kpdtp : (kpdtp + 1)) + "\n");
                kpdtp += kp;

            } else if (parts[0].equalsIgnoreCase("MEND")) {
                // End of macro definition
                mdt.write(line + "\n");
                flag = kp = pp = 0;
                mdtp++;
                paramNo = 1;

                // Write the PNTAB entry
                pnt.write(macroname + ":\t");
                for (String param : pntab.keySet()) {
                    pnt.write(param + "\t");
                }
                pnt.write("\n");

                // Clear parameter table for the next macro
                pntab.clear();

            } else if (flag == 1) {
                // Inside macro body
                for (String part : parts) {
                    if (part.contains("&")) {
                        part = part.replaceAll("[&,]", "");  // Remove & and , from parameters
                        mdt.write("(P," + pntab.get(part) + ")\t");
                    } else {
                        mdt.write(part + "\t");
                    }
                }
                mdt.write("\n");
                mdtp++;

            } else {
                // Outside of macro definition, write to intermediate file
                ir.write(line + "\n");
            }
        }

        // Close all file readers and writers
        br.close();
        mdt.close();
        mnt.close();
        ir.close();
        pnt.close();
        kpdt.close();

        System.out.println("Macro Pass 1 Processing done. :)");
    }
}
